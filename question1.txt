Question :- WHAT IS REACT ?

Answer :- The React.js framework is an open-source JavaScript framework and library developed by Facebook. 
          It’s used for building interactive user interfaces and web applications quickly and efficiently with 
          significantly less code than you would with vanilla JavaScript.
          In React, we develop our applications by creating reusable components that we can think of as independent Lego blocks. 
          These components are individual pieces of a final interface, which, when assembled, form the application’s entire user interface.



Question :- WHO MADE REACT ?

Answer :- Jordan Walke
React was created by Jordan Walke, a software engineer at Meta, who released an early prototype of React called "FaxJS". 
      He was influenced by XHP, an HTML component library for PHP. It was first deployed on Facebook's News Feed in 2011 and later on Instagram in 2012.




Question :- What is Babel ?

Answer :- Babel is a toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments. Here are the main things Babel can do for us:-

      -  Transform syntax
      -  Polyfill features that are missing in your target environment (through a third-party polyfill such as core-js)
      -  Source code transformations (codemods)



Question :- How does Babel convert html code in React into valid code ?

Answer :-  Babel converts HTML code into valid code by using the JSX code and converter.

            :- A user can essentially use future JavaScript in the browsers of today thanks to Babel, a very well-known transpiler.
            :- The standard method has the ability to accurately translate the newest JavaScript code into a format that the browser can properly understand.
            :- Babel is a key tool that can translate JSX syntax, which is used to create HTML-like code in React components, into valid JavaScript code that can be executed in preferred browsers.
            :- By converting the JSX code into JavaScript functions that return the same HTML-like structures.
            :- The functionality then enables the usage of JSX in React apps and ensures compatibility with outdated browsers that might not support the most recent JavaScript syntax.




Question :- What is ReactDOM used for? Write an example ?

Answer :- ReactDOM is a package that provides DOM specific methods that can be used at the top level of a web app to enable an efficient way of managing DOM elements of the web page. 
          ReactDOM provides the developers with an API containing the following methods and a few more. 

-render()
-findDOMNode()
-unmountComponentAtNode()
-hydrate()
-createPortal()


Pre-requisite: To use the ReactDOM in any React web app we must first import ReactDOM from the react-dom package by using the following code snippet:  

import ReactDOM from 'react-dom'


render() Function


This is one of the most important methods of ReactDOM. This function is used to render a single React Component or several Components wrapped together in a Component or a div element. This function uses the efficient methods of React for updating the DOM by being able to change only a subtree, efficient diff methods, etc. 


Syntax: 

ReactDOM.render(element, container, callback)


Parameters: This method can take a maximum of three parameters as described below.  

element :- This parameter expects a JSX expression or a React Element to be rendered.
container :- This parameter expects the container in which the element has to be rendered.
callback :- This is an optional parameter that expects a function that is to be executed once the render is complete.
Return Type :- This function returns a reference to the component or null if a stateless component was rendered. 



Question :- What are the packages that you need to import for react to work with ?

Answer :-   <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
            <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
            <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>



Question :- How do you add react to a web application ?

Answer :-   for that we do need to have a div with the id:- "root"
            and we can catch that in our js file (<div id="root"></div>)



Question :-  What is React.createElement ?

Answer :- React.createElement(
  type,
  [props],
  [...children]
)

Create and return a new React element of the given type. The type argument can be either a tag name string (such as 'div' or 'span'), 
a React component type (a class or a function), or a React fragment type.

Code written with JSX will be converted to use React.createElement(). 
we will not typically invoke React.createElement() directly if we are using JSX.


Question :- What are the three properties that createElement accept ?


Answer :- React.createElement(type,{props},children); 

:- type: the type of the HTML element (h1,p,button).
:- props: properties of the object({style:{size:10px}} or Eventhandlers, classNames,etc).
:- children: anything that need to be displayed on the screen.



Question:- What is the meaning of render and root?


Answer: -Render
Render means renew only an appropriate part of information on user’s screen when the element properties (props)
 are replaced by new ones or a component state (as set of props) changes in application. Thanks to the render method,
  we avoid reloading the whole web page, save time, and increase productivity.


Root:- The root node is the HTML element where you want to display the result. It is like a container for content managed by React.